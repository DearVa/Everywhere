<v:ReactiveShadWindow
  x:Class="Everywhere.Views.ChatWindow" xmlns="https://github.com/avaloniaui"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:at="clr-namespace:Everywhere.AttachedProperties"
  xmlns:be="clr-namespace:Everywhere.Behaviors" xmlns:chat="clr-namespace:Everywhere.Chat"
  xmlns:common="clr-namespace:Everywhere.Common" xmlns:interop="clr-namespace:Everywhere.Interop"
  xmlns:md="clr-namespace:LiveMarkdown.Avalonia;assembly=LiveMarkdown.Avalonia" xmlns:shadui="clr-namespace:ShadUI.Controls;assembly=ShadUI"
  xmlns:sys="clr-namespace:System;assembly=System.Runtime" xmlns:themes="clr-namespace:ShadUI.Themes;assembly=ShadUI"
  xmlns:v="clr-namespace:Everywhere.Views" xmlns:vc="clr-namespace:Everywhere.ValueConverters"
  xmlns:vm="clr-namespace:Everywhere.ViewModels" MinWidth="400"
  MinHeight="144.8" x:DataType="vm:ChatWindowViewModel"
  x:TypeArguments="vm:ChatWindowViewModel" Background="Transparent"
  ExtendClientAreaChromeHints="NoChrome" ExtendClientAreaToDecorationsHint="True"
  IsOpened="{Binding IsOpened, Mode=OneWayToSource}"
  IsTitleBarVisible="False"
  RequestedThemeVariant="{x:Static themes:ThemeVariants.Acrylic}"
  ShowActivated="False" SizeToContent="WidthAndHeight"
  SystemDecorations="BorderOnly"
  TargetBoundingRect="{Binding TargetBoundingRect}"
  TransparencyLevelHint="AcrylicBlur" WindowStartupLocation="Manual">

  <v:ReactiveShadWindow.Hosts>
    <shadui:DialogHost
      x:Name="PART_DialogHost" Margin="0,36,0,0"
      Owner="{Binding RelativeSource={RelativeSource AncestorType=v:ChatWindow}}"/>
    <shadui:ToastHost
      x:Name="PART_ToastHost" Margin="0,36,0,0"/>
  </v:ReactiveShadWindow.Hosts>

  <Grid
    x:Name="RootGrid" RowDefinitions="44,*">
    <ExperimentalAcrylicBorder
      Grid.Row="0" Grid.RowSpan="2">
      <ExperimentalAcrylicBorder.Material>
        <ExperimentalAcrylicMaterial
          FallbackColor="#CC000000" MaterialOpacity="0.7"
          TintColor="Black" TintOpacity="0.9"/>
      </ExperimentalAcrylicBorder.Material>
    </ExperimentalAcrylicBorder>

    <DockPanel
      Grid.Row="0" Margin="8"
      Background="Transparent" LastChildFill="True"
      PointerPressed="HandleTitleBarPointerPressed">
      <Viewbox
        DockPanel.Dock="Left" Width="36"
        Height="36" Margin="0,0,0,-4">
        <ContentPresenter Content="{StaticResource AssistantAvatar}"/>
      </Viewbox>

      <StackPanel
        DockPanel.Dock="Right" VerticalAlignment="Center"
        Orientation="Horizontal" Spacing="4">
        <StackPanel.Styles>
          <Style Selector=":is(Button).TitleBar">
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Height" Value="28"/>
            <Setter Property="MinHeight" Value="28"/>
            <Setter Property="MinWidth" Value="28"/>
            <Setter Property="Width" Value="28"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="CornerRadius" Value="4"/>
            <Setter Property="Background" Value="Transparent"/>

            <Style Selector="^.Close /template/ Border#HoverBackground">
              <Setter Property="Background" Value="#C42B1C"/>
            </Style>

            <Style Selector="^ LucideIcon">
              <Setter Property="Size" Value="20"/>
              <Setter Property="HorizontalAlignment" Value="Center"/>
              <Setter Property="VerticalAlignment" Value="Center"/>
            </Style>
          </Style>

          <Style Selector="FlyoutPresenter">
            <Setter Property="Background" Value="{DynamicResource SecondaryColor}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource AcrylicBorderBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="CornerRadius" Value="8.5"/>
            <Setter Property="Padding" Value="0"/>
          </Style>

          <Style Selector="MenuFlyoutPresenter">
            <Setter Property="Background" Value="{DynamicResource SecondaryColor}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource AcrylicBorderBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="CornerRadius" Value="8.5"/>
            <Setter Property="Padding" Value="0"/>

            <Style Selector="^ MenuItem.MenuFlyoutMenuItem /template/ Border#HoverBackground">
              <Setter Property="Background" Value="{DynamicResource SecondaryCardBackgroundColor}"/>
            </Style>
          </Style>

          <Style Selector="Expander:not(.CanExpand)">
            <Style Selector="^ ToggleButton#PART_ToggleButton">
              <Setter Property="IsEnabled" Value="False"/>
            </Style>
            <Style Selector="^ LucideIcon#PART_Icon">
              <Setter Property="IsVisible" Value="False"/>
            </Style>
            <Style Selector="^ ContentControl#ContentExpandControlContainer">
              <Setter Property="IsVisible" Value="False"/>
            </Style>
          </Style>
        </StackPanel.Styles>

        <Button
          x:Name="HistoryButton" Classes="Ghost TitleBar"
          Command="{Binding ChatContextManager.UpdateRecentHistoryCommand}"
          IsVisible="{Binding !IsViewingHistory}"
          ToolTip.Tip="{I18N {x:Static LocaleKey.ChatWindow_History_ToolTip}}">
          <Button.Flyout>
            <Flyout ShowMode="Transient">
              <Grid RowDefinitions="*,1,Auto">
                <ScrollViewer
                  Grid.Row="0" Width="200"
                  MaxHeight="400" HorizontalContentAlignment="Stretch"
                  HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
                  <ItemsControl
                    Margin="8" Padding="0"
                    ItemsSource="{Binding ChatContextManager.RecentHistory}">
                    <ItemsControl.ItemsPanel>
                      <ItemsPanelTemplate>
                        <StackPanel
                          Orientation="Vertical" Spacing="8"/>
                      </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>

                    <ItemsControl.ItemTemplate>
                      <DataTemplate DataType="chat:ChatContextHistory">
                        <StackPanel
                          Orientation="Vertical" Spacing="4">
                          <TextBlock
                            Classes="Muted" HorizontalAlignment="Left"
                            FontSize="12">
                            <TextBlock.Text>
                              <I18N Key="{Binding Date, Converter={x:Static vc:DynamicResourceKeyConverter.Shared}}"/>
                            </TextBlock.Text>
                          </TextBlock>

                          <ListBox
                            Padding="0" Background="Transparent"
                            BorderThickness="0" CornerRadius="0"
                            ItemsSource="{Binding MetadataList}"
                            ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                            SelectedItem="{Binding $parent[v:ChatWindow].ViewModel.ChatContextManager.CurrentMetadata, FallbackValue={x:Null}}">
                            <ListBox.Styles>
                              <Style Selector="ListBoxItem">
                                <Setter Property="Height" Value="28"/>
                                <Setter Property="Padding" Value="6,0"/>
                                <Setter Property="CornerRadius" Value="4"/>
                              </Style>
                            </ListBox.Styles>

                            <ListBox.ItemTemplate>
                              <DataTemplate DataType="chat:ChatContextMetadata">
                                <TextBlock
                                  Text="{Binding ActualTopic}"
                                  TextTrimming="CharacterEllipsis"/>
                              </DataTemplate>
                            </ListBox.ItemTemplate>
                          </ListBox>
                        </StackPanel>
                      </DataTemplate>
                    </ItemsControl.ItemTemplate>
                  </ItemsControl>
                </ScrollViewer>

                <Border
                  Grid.Row="1"
                  Background="{DynamicResource BorderColor}"/>

                <Button
                  Grid.Row="2" MinHeight="28"
                  Content="{I18N {x:Static LocaleKey.ChatWindow_ViewAllHistoryButton_Content}}">
                  <Interaction.Behaviors>
                    <ButtonClickEventTriggerBehavior>
                      <ButtonClickEventTriggerBehavior.Actions>
                        <HideFlyoutAction Flyout="{Binding #HistoryButton.Flyout}"/>
                        <InvokeCommandAction
                          Command="{Binding SwitchViewingHistoryCommand}"
                          CommandParameter="True"/>
                      </ButtonClickEventTriggerBehavior.Actions>
                    </ButtonClickEventTriggerBehavior>
                  </Interaction.Behaviors>
                </Button>
              </Grid>
            </Flyout>
          </Button.Flyout>

          <LucideIcon
            Kind="History" Size="16"/>
        </Button>

        <Button
          Classes="Ghost TitleBar"
          Command="{Binding ChatContextManager.CreateNewCommand}"
          ToolTip.Tip="{I18N {x:Static LocaleKey.ChatWindow_CreateNew_ToolTip}}">
          <LucideIcon Kind="Plus"/>
        </Button>

        <ToggleButton
          Classes="Ghost TitleBar"
          IsChecked="{Binding $parent[v:ChatWindow].IsWindowPinned, Mode=TwoWay}"
          ToolTip.Tip="{I18N {x:Static LocaleKey.ChatWindow_TogglePin_ToolTip}}">
          <LucideIcon
            Kind="Pin" Size="16"/>
        </ToggleButton>

        <Button
          Classes="Ghost TitleBar Close"
          Command="{Binding CloseCommand}"
          ToolTip.Tip="{I18N {x:Static LocaleKey.ChatWindow_Close_ToolTip}}">
          <LucideIcon Kind="X"/>
        </Button>
      </StackPanel>

      <TextBlock
        Classes="Large" Margin="8,0,0,0"
        VerticalAlignment="Center" IsHitTestVisible="False"
        Text="{Binding ChatContextManager.Current.Metadata.ActualTopic}">
        <TextBlock.Transitions>
          <Transitions>
            <shadui:StringTransition
              Easing="CubicEaseInOut" Property="Text"
              Duration="0:0:0.4"/>
          </Transitions>
        </TextBlock.Transitions>
      </TextBlock>
    </DockPanel>

    <Panel Grid.Row="1">
      <Grid
        x:Name="ChatMessageRootGrid"
        IsVisible="{Binding !IsViewingHistory}"
        RowDefinitions="*,Auto">
        <ScrollViewer
          x:Name="ChatMessageScrollViewer" Grid.Row="0"
          DockPanel.Dock="Top" HorizontalContentAlignment="Stretch"
          HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
          <Interaction.Behaviors>
            <be:AutoScrollBehavior/>
          </Interaction.Behaviors>

          <Panel>
            <Panel.Styles>
              <Style Selector="shadui|Loading">
                <Setter Property="Foreground" Value="{DynamicResource SukiLowText}"/>
              </Style>
            </Panel.Styles>

            <StackPanel
              Margin="0,0,0,8"
              IsVisible="{Binding ChatContextManager.ChatMessageNodes.Count, Converter={x:Static vc:Int32Converters.NotGreaterThan}, ConverterParameter=1}"
              Spacing="8">
              <ToggleSwitch
                HorizontalAlignment="Center" shadui:ToggleSwitchAssist.RightAlignedContent="True"
                IsChecked="{Binding ChatContextManager.Current.Metadata.IsTemporary, Mode=TwoWay}"
                OffContent="{I18N {x:Static LocaleKey.ChatContext_Temporary}}"
                OnContent="{I18N {x:Static LocaleKey.ChatContext_Temporary}}"/>

              <ItemsControl
                IsVisible="{Binding $self.ItemCount, Converter={x:Static vc:Int32Converters.GreaterThan}, ConverterParameter=0}"
                ItemsSource="{Binding QuickActions}">
                <ItemsControl.DataTemplates>
                  <DataTemplate DataType="common:DynamicNamedCommand">
                    <Button
                      Classes="Secondary" Height="32"
                      Padding="12,4"
                      Command="{Binding Command}"
                      CommandParameter="{Binding CommandParameter}"
                      CornerRadius="18">
                      <StackPanel
                        VerticalAlignment="Center" Orientation="Vertical"
                        Spacing="4">
                        <StackPanel
                          Orientation="Horizontal" Spacing="6">
                          <LucideIcon
                            VerticalAlignment="Center"
                            Kind="{Binding Icon}"
                            Size="19"/>
                          <TextBlock
                            VerticalAlignment="Center"
                            Text="{Binding HeaderKey^}"/>
                        </StackPanel>

                        <TextBlock
                          IsVisible="{Binding DescriptionKey, Converter={x:Static ObjectConverters.IsNotNull}}"
                          Text="{Binding DescriptionKey^, FallbackValue={x:Null}}"
                          TextWrapping="Wrap"/>
                      </StackPanel>
                    </Button>
                  </DataTemplate>
                </ItemsControl.DataTemplates>

                <ItemsControl.ItemsPanel>
                  <ItemsPanelTemplate>
                    <WrapPanel
                      HorizontalAlignment="Center" VerticalAlignment="Center"
                      ItemSpacing="8" LineSpacing="6"/>
                  </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
              </ItemsControl>
            </StackPanel>

            <ItemsControl
              x:Name="ItemsControl" Margin="0,0,0,8"
              Padding="8,0"
              IsVisible="{Binding $self.ItemCount, Converter={x:Static vc:Int32Converters.GreaterThan}, ConverterParameter=0}"
              ItemsSource="{Binding ChatContextManager.ChatMessageNodes}">
              <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                  <StackPanel
                    Orientation="Vertical" Spacing="6"/>
                </ItemsPanelTemplate>
              </ItemsControl.ItemsPanel>

              <ItemsControl.Styles>
                <Style Selector="shadui|Loading">
                  <Setter Property="Foreground" Value="{DynamicResource ForegroundColor}"/>
                </Style>

                <Style Selector="Border.ChatBubble">
                  <Setter Property="Padding" Value="8,4"/>
                  <Setter Property="CornerRadius" Value="12"/>
                  <Setter Property="BorderThickness" Value="1"/>
                  <Setter Property="Background" Value="{DynamicResource CardBackgroundColor}"/>
                  <Setter Property="BorderBrush" Value="{DynamicResource BorderColor}"/>
                </Style>

                <Style Selector="Border.Invalid">
                  <Setter Property="Background" Value="{DynamicResource ErrorColor20}"/>
                  <Setter Property="ToolTip.Tip" Value="Invalid"/>
                </Style>

                <Style Selector="Button LucideIcon">
                  <Setter Property="Size" Value="14"/>
                </Style>

                <Style Selector="SelectableTextBlock">
                  <Setter Property="TextWrapping" Value="Wrap"/>
                </Style>

                <Style Selector="NumericUpDown">
                  <Setter Property="Background" Value="{x:Null}"/>
                  <Setter Property="BorderBrush" Value="{x:Null}"/>
                  <Setter Property="BorderThickness" Value="0"/>
                  <Setter Property="Foreground" Value="{DynamicResource ForegroundColor}"/>
                  <Setter Property="Template">
                    <ControlTemplate>
                      <ButtonSpinner
                        Name="PART_Spinner" HorizontalContentAlignment="Center"
                        VerticalContentAlignment="Center">
                        <Panel>
                          <!--  TextBox is useless but necessary for NumericUpDown  -->
                          <TextBox
                            x:Name="PART_TextBox" IsVisible="False"/>
                          <TextBlock
                            VerticalAlignment="Center" FontSize="12"
                            Foreground="{TemplateBinding Foreground}"
                            TextAlignment="Center" TextWrapping="NoWrap">
                            <Run Text="{Binding Value, StringFormat={}{0:F0}, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Run Text="/"/>
                            <Run Text="{Binding Maximum, StringFormat={}{0:F0}, RelativeSource={RelativeSource TemplatedParent}}"/>
                          </TextBlock>
                        </Panel>
                      </ButtonSpinner>
                    </ControlTemplate>
                  </Setter>

                  <Style Selector="^ ButtonSpinner">
                    <Setter Property="Template">
                      <ControlTemplate>
                        <Grid ColumnDefinitions="Auto,*,Auto">
                          <RepeatButton
                            Name="PART_DecreaseButton" Grid.Column="0"
                            Padding="2" Background="Transparent"
                            BorderBrush="{x:Null}"
                            BorderThickness="0"
                            Foreground="{TemplateBinding Foreground}">
                            <LucideIcon
                              Kind="ChevronLeft" Size="18"/>
                          </RepeatButton>
                          <ContentPresenter
                            Name="PART_ContentPresenter" Grid.Column="1"
                            HorizontalContentAlignment="Center" VerticalContentAlignment="Center"
                            Content="{TemplateBinding Content}"
                            TabIndex="1"/>
                          <RepeatButton
                            Name="PART_IncreaseButton" Grid.Column="2"
                            Padding="2" Background="Transparent"
                            BorderBrush="{x:Null}"
                            BorderThickness="0"
                            Foreground="{TemplateBinding Foreground}">
                            <LucideIcon
                              Kind="ChevronRight" Size="18"/>
                          </RepeatButton>
                        </Grid>
                      </ControlTemplate>
                    </Setter>
                  </Style>
                </Style>

                <Style Selector="ContentControl.ChatMessage">
                  <Setter Property="ClipToBounds" Value="False"/>
                  <Setter Property="at:DataTemplatesAttach.DataTemplates">
                    <DataTemplates>
                      <DataTemplate DataType="chat:AssistantChatMessage">
                        <StackPanel
                          Classes="ChatMessage Assistant" Background="Transparent"
                          Orientation="Vertical" Spacing="4">
                          <ItemsControl ItemsSource="{Binding Spans, Converter={x:Static vc:ObservableListConverters.ObservableOnDispatcher}}">
                            <ItemsControl.ItemsPanel>
                              <ItemsPanelTemplate>
                                <StackPanel Spacing="8"/>
                              </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>

                            <ItemsControl.ItemTemplate>
                              <DataTemplate>
                                <StackPanel
                                  Orientation="Vertical" Spacing="8">
                                  <v:LazyContentControl IsVisible="{Binding ReasoningOutput, Converter={x:Static ObjectConverters.IsNotNull}}">
                                    <ControlTemplate>
                                      <v:ChatActionBubble
                                        ElapsedSeconds="{Binding ReasoningElapsedSeconds}"
                                        Header="{I18N {x:Static LocaleKey.ChatWindow_ChatMessage_Assistant_DeepThinking}}"
                                        Icon="Brain"
                                        IsBusy="{Binding ReasoningFinishedAt, Converter={x:Static ObjectConverters.IsNull}}">
                                        <SelectableTextBlock
                                          Classes="Muted" Margin="6,4"
                                          FontSize="13"
                                          Text="{Binding ReasoningOutput}"/>
                                      </v:ChatActionBubble>
                                    </ControlTemplate>
                                  </v:LazyContentControl>

                                  <md:MarkdownRenderer
                                    InlineHyperlinkCommand="{Binding $parent[v:ChatWindow].LaunchInlineHyperlinkCommand}"
                                    MarkdownBuilder="{Binding MarkdownBuilder}"/>

                                  <ItemsControl
                                    ClipToBounds="False"
                                    IsVisible="{Binding !!$self.ItemCount}"
                                    ItemsSource="{Binding FunctionCalls, Converter={x:Static vc:ObservableListConverters.ObservableOnDispatcher}}">
                                    <ItemsControl.ItemsPanel>
                                      <ItemsPanelTemplate>
                                        <StackPanel Spacing="8"/>
                                      </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>

                                    <ItemsControl.ItemTemplate>
                                      <DataTemplate>
                                        <ContentControl
                                          Classes="ChatMessage"
                                          Content="{Binding}"/>
                                      </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                  </ItemsControl>
                                </StackPanel>
                              </DataTemplate>
                            </ItemsControl.ItemTemplate>
                          </ItemsControl>

                          <Border
                            Padding="8,4" HorizontalAlignment="Left"
                            Background="{DynamicResource ErrorColor20}"
                            CornerRadius="4"
                            IsVisible="{Binding ErrorMessageKey, Converter={x:Static ObjectConverters.IsNotNull}, FallbackValue=False}">
                            <SelectableTextBlock
                              Text="{Binding ErrorMessageKey^, FallbackValue={x:Null}}"
                              TextWrapping="Wrap"/>
                          </Border>

                          <shadui:Skeleton
                            Width="12" Height="12"
                            HorizontalAlignment="Left"
                            Background="{DynamicResource PrimaryColor}"
                            CornerRadius="8"
                            IsVisible="{Binding IsBusy}"/>

                          <SelectableTextBlock
                            Classes="Muted" FontSize="10">
                            <TextBlock.IsVisible>
                              <MultiBinding Converter="{x:Static BoolConverters.And}">
                                <Binding Path="$parent[v:ChatWindow].ViewModel.Settings.ChatWindow.ShowChatStatistics"/>
                                <Binding Path="!IsBusy"/>
                              </MultiBinding>
                            </TextBlock.IsVisible>

                            <Run Text="{I18N {x:Static LocaleKey.ChatWindow_ChatStatisticsTextBlock_InputTokenCountRun}}"/>
                            <Run Text="{Binding InputTokenCount}"/>
                            <Run Text="·"/>
                            <Run Text="{I18N {x:Static LocaleKey.ChatWindow_ChatStatisticsTextBlock_OutputTokenCountRun}}"/>
                            <Run Text="{Binding OutputTokenCount}"/>
                            <Run Text="·"/>
                            <Run Text="{I18N {x:Static LocaleKey.ChatWindow_ChatStatisticsTextBlock_TotalTokenCountRun}}"/>
                            <Run Text="{Binding TotalTokenCount}"/>
                            <Run Text="·"/>
                            <Run Text="{I18N {x:Static LocaleKey.ChatWindow_ChatStatisticsTextBlock_ElapsedRun}}"/>
                            <Run Text="{Binding ElapsedSeconds, StringFormat='{}{0:F1}s', Mode=OneWay}"/>
                          </SelectableTextBlock>

                          <StackPanel
                            x:Name="ChatMessageOperationPanel"
                            IsVisible="{Binding !IsBusy}"
                            Orientation="Horizontal">
                            <NumericUpDown
                              x:Name="ChoiceSelector" Margin="0,0,4,0"
                              IsVisible="{Binding $parent[ContentControl].((chat:ChatMessageNode)DataContext).Parent.ChoiceCount, FallbackValue=False, Converter={x:Static vc:Int32Converters.GreaterThan}, ConverterParameter=1}"
                              Maximum="{Binding $parent[ContentControl].((chat:ChatMessageNode)DataContext).Parent.ChoiceCount, FallbackValue=1}"
                              Minimum="1"
                              Value="{Binding $parent[ContentControl].((chat:ChatMessageNode)DataContext).Parent.ChoiceIndex, FallbackValue=1, Converter={x:Static vc:Int32Converters.Plus}, ConverterParameter=1}"/>

                            <Button
                              Classes="Ghost Compact"
                              Command="{Binding $parent[v:ChatWindow].ViewModel.RetryCommand}"
                              CommandParameter="{Binding $parent[ContentControl].DataContext}"
                              ToolTip.Tip="{I18N {x:Static LocaleKey.ChatWindow_ChatMessage_Assistant_Regenerate}}">
                              <LucideIcon Kind="RefreshCcw"/>
                            </Button>
                            <Button
                              Classes="Ghost Compact"
                              Command="{Binding $parent[v:ChatWindow].ViewModel.CopyCommand}"
                              CommandParameter="{Binding}"
                              ToolTip.Tip="{I18N {x:Static LocaleKey.ChatWindow_ChatMessage_Assistant_Copy}}">
                              <LucideIcon Kind="Copy"/>
                            </Button>
                          </StackPanel>
                        </StackPanel>
                      </DataTemplate>

                      <DataTemplate DataType="chat:UserChatMessage">
                        <StackPanel
                          Classes="ChatMessage User" Margin="36,0,0,0"
                          HorizontalAlignment="Right" Background="Transparent"
                          Orientation="Vertical" Spacing="4">
                          <Border
                            Classes="ChatBubble" HorizontalAlignment="Right">
                            <SelectableTextBlock Inlines="{Binding Inlines}"/>
                          </Border>

                          <ItemsControl ItemsSource="{Binding Attachments}">
                            <ItemsControl.ItemsPanel>
                              <ItemsPanelTemplate>
                                <WrapPanel
                                  ItemSpacing="6" LineSpacing="4"/>
                              </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>

                            <ItemsControl.DataTemplates>
                              <DataTemplate DataType="chat:ChatFileAttachment">
                                <Panel>
                                  <Border
                                    ClipToBounds="True" CornerRadius="4"
                                    IsVisible="{Binding IsImage}">
                                    <Image
                                      MaxWidth="64" MaxHeight="64"
                                      Source="{Binding Image}">
                                      <ToolTip.Tip>
                                        <Image Source="{Binding Image}"/>
                                      </ToolTip.Tip>
                                    </Image>
                                  </Border>

                                  <Border
                                    Height="24"
                                    Background="{DynamicResource CardBackgroundColor}"
                                    CornerRadius="4"
                                    IsVisible="{Binding !IsImage}"
                                    ToolTip.Tip="{Binding FilePath}">
                                    <DockPanel
                                      Margin="6,0" HorizontalSpacing="4"
                                      LastChildFill="True">
                                      <LucideIcon
                                        DockPanel.Dock="Left" VerticalAlignment="Center"
                                        Kind="{Binding Icon}"
                                        Size="14"/>
                                      <TextBlock
                                        VerticalAlignment="Center" FontSize="12"
                                        Text="{Binding HeaderKey^}"
                                        TextTrimming="{x:Static TextTrimming.PrefixCharacterEllipsis}"/>
                                    </DockPanel>
                                  </Border>
                                </Panel>
                              </DataTemplate>

                              <DataTemplate DataType="chat:ChatVisualElementAttachment">
                                <Border
                                  Height="24"
                                  Background="{DynamicResource CardBackgroundColor}"
                                  Classes.Invalid="{Binding Element.Target, Converter={x:Static ObjectConverters.IsNull}, FallbackValue=true}"
                                  CornerRadius="4">
                                  <DockPanel
                                    Margin="6,0" HorizontalSpacing="4"
                                    LastChildFill="True">
                                    <LucideIcon
                                      DockPanel.Dock="Left" VerticalAlignment="Center"
                                      Kind="{Binding Icon}"
                                      Size="14"/>
                                    <TextBlock
                                      VerticalAlignment="Center" FontSize="12"
                                      Text="{Binding HeaderKey^}"
                                      TextTrimming="{x:Static TextTrimming.PrefixCharacterEllipsis}"/>
                                  </DockPanel>
                                </Border>
                              </DataTemplate>

                              <DataTemplate DataType="chat:ChatAttachment">
                                <Border
                                  Height="24"
                                  Background="{DynamicResource CardBackgroundColor}"
                                  CornerRadius="4">
                                  <DockPanel
                                    Margin="6,0" HorizontalSpacing="4"
                                    LastChildFill="True">
                                    <LucideIcon
                                      DockPanel.Dock="Left" VerticalAlignment="Center"
                                      Kind="{Binding Icon}"
                                      Size="14"/>
                                    <TextBlock
                                      VerticalAlignment="Center" FontSize="12"
                                      Text="{Binding HeaderKey^}"
                                      TextTrimming="{x:Static TextTrimming.PrefixCharacterEllipsis}"/>
                                  </DockPanel>
                                </Border>
                              </DataTemplate>
                            </ItemsControl.DataTemplates>
                          </ItemsControl>

                          <!--  TODO: Edit operations  -->
                        </StackPanel>
                      </DataTemplate>

                      <DataTemplate DataType="chat:ActionChatMessage">
                        <v:ChatActionBubble
                          ElapsedSeconds="{Binding ElapsedSeconds}"
                          Header="{Binding HeaderKey^, FallbackValue={x:Null}}"
                          Icon="{Binding Icon}"
                          IsBusy="{Binding IsBusy}"
                          IsError="{Binding ErrorMessageKey, Converter={x:Static ObjectConverters.IsNotNull}}">
                          <v:ChatActionBubble.ErrorContent>
                            <SelectableTextBlock
                              Classes="Muted" Margin="6,4"
                              FontSize="13"
                              Text="{Binding ErrorMessageKey^, FallbackValue={x:Null}}"/>
                          </v:ChatActionBubble.ErrorContent>
                        </v:ChatActionBubble>
                      </DataTemplate>

                      <DataTemplate DataType="chat:FunctionCallChatMessage">
                        <v:ChatActionBubble
                          x:Name="FunctionCallChatActionBubble" AdornerLayer.IsClipEnabled="False"
                          ClipToBounds="False"
                          ElapsedSeconds="{Binding ElapsedSeconds}"
                          Header="{Binding HeaderKey^, FallbackValue={x:Null}}"
                          Icon="{Binding Icon}"
                          IsBusy="{Binding IsBusy}"
                          IsError="{Binding ErrorMessageKey, Converter={x:Static ObjectConverters.IsNotNull}}"
                          IsExpanded="{Binding IsExpanded, Mode=TwoWay}">
                          <AdornerLayer.Adorner>
                            <shadui:Badge
                              Width="20" Height="20"
                              Margin="0,-8,-8,0" Padding="0"
                              HorizontalAlignment="Right" VerticalAlignment="Top"
                              Background="{DynamicResource ErrorColor}"
                              Content="!" CornerRadius="10"
                              FontSize="10">
                              <shadui:Badge.IsVisible>
                                <MultiBinding Converter="{x:Static BoolConverters.And}">
                                  <Binding Path="!#FunctionCallChatActionBubble.IsExpanded"/>
                                  <Binding Path="IsWaitingForUserInput"/>
                                </MultiBinding>
                              </shadui:Badge.IsVisible>

                              <shadui:Badge.Styles>
                                <Style Selector="ContentPresenter">
                                  <Style.Animations>
                                    <Animation
                                      IterationCount="Infinite" Duration="0:0:2">
                                      <KeyFrame Cue="0%">
                                        <Setter Property="Opacity" Value="1.0"/>
                                      </KeyFrame>
                                      <KeyFrame Cue="50%">
                                        <Setter Property="Opacity" Value="0.5"/>
                                      </KeyFrame>
                                      <KeyFrame Cue="100%">
                                        <Setter Property="Opacity" Value="1.0"/>
                                      </KeyFrame>
                                    </Animation>
                                  </Style.Animations>
                                </Style>
                              </shadui:Badge.Styles>
                            </shadui:Badge>
                          </AdornerLayer.Adorner>

                          <v:ChatActionBubble.ErrorContent>
                            <SelectableTextBlock
                              Classes="Muted" Margin="6,4"
                              FontSize="13"
                              Text="{Binding ErrorMessageKey^, FallbackValue={x:Null}}"/>
                          </v:ChatActionBubble.ErrorContent>

                          <ItemsControl ItemsSource="{Binding DisplayBlocks}">
                            <ItemsControl.ItemTemplate>
                              <DataTemplate>
                                <v:ChatPluginDisplayBlockPresenter Content="{Binding}"/>
                              </DataTemplate>
                            </ItemsControl.ItemTemplate>
                          </ItemsControl>
                        </v:ChatActionBubble>
                      </DataTemplate>
                    </DataTemplates>
                  </Setter>
                </Style>
              </ItemsControl.Styles>

              <ItemsControl.ItemTemplate>
                <DataTemplate DataType="chat:ChatMessageNode">
                  <ContentControl
                    Classes="ChatMessage"
                    Content="{Binding Message}"/>
                </DataTemplate>
              </ItemsControl.ItemTemplate>
            </ItemsControl>
          </Panel>
        </ScrollViewer>

        <Button
          Classes="Primary Rounded" Grid.Row="0"
          Margin="8" HorizontalAlignment="Right"
          VerticalAlignment="Bottom"
          Command="{Binding #ChatMessageScrollViewer.ScrollToEnd}"
          Focusable="False"
          ToolTip.Tip="{I18N {x:Static LocaleKey.ChatWindow_ScrollToBottom_ToolTip}}">
          <Button.IsVisible>
            <MultiBinding Converter="{x:Static vc:DoubleConverters.MultiSmallerThanAny}">
              <Binding
                Converter="{x:Static vc:DoubleConverters.Plus}"
                ConverterParameter="30" Path="#ChatMessageScrollViewer.Offset.Y"/>
              <Binding Path="#ChatMessageScrollViewer.ScrollBarMaximum.Y"/>
            </MultiBinding>
          </Button.IsVisible>

          <LucideIcon
            Kind="ArrowDown" Size="16"/>
        </Button>

        <ExperimentalAcrylicBorder
          Name="PART_AcrylicBorder" Grid.Row="1">
          <ExperimentalAcrylicBorder.Material>
            <ExperimentalAcrylicMaterial
              FallbackColor="#99000000" MaterialOpacity="0.7"
              TintColor="#222222" TintOpacity="0.7"/>
          </ExperimentalAcrylicBorder.Material>

          <v:ChatInputBox
            x:Name="ChatInputBox" Margin="8"
            AcceptsReturn="True"
            CancelCommand="{Binding CancelCommand}"
            CaretIndex="{x:Static sys:Int32.MaxValue}"
            ChatAttachmentItemsSource="{Binding ChatAttachments}"
            Command="{Binding SendMessageCommand}"
            CustomAssistants="{Binding Settings.Model.CustomAssistants}"
            Focusable="True" IsImageEnabled="False"
            IsImageSupported="False"
            IsSendButtonEnabled="{Binding !IsBusy}"
            IsToolCallEnabled="{Binding Settings.Internal.IsToolCallEnabled, Mode=TwoWay}"
            IsToolCallSupported="{Binding Settings.Model.SelectedCustomAssistant.IsFunctionCallingSupported, FallbackValue=false}"
            MaxChatAttachmentCount="{Binding Settings.Internal.MaxChatAttachmentCount}"
            SelectedCustomAssistant="{Binding Settings.Model.SelectedCustomAssistant, Mode=TwoWay}"
            Text="{Binding Settings.Internal.ChatInputBoxText, Mode=TwoWay}"
            TextWrapping="Wrap">
            <v:ChatInputBox.AddChatAttachmentMenuItems>
              <MenuItem
                Command="{Binding PickElementCommand}"
                CommandParameter="{x:Static interop:PickElementMode.Screen}"
                Header="{I18N {x:Static LocaleKey.ChatWindow_ChatInputBox_AddAttachmentMenuItems_PickScreen}}">
                <MenuItem.Icon>
                  <LucideIcon
                    Width="18" Height="18"
                    Kind="Monitor" Size="18"/>
                </MenuItem.Icon>
              </MenuItem>
              <MenuItem
                Command="{Binding PickElementCommand}"
                CommandParameter="{x:Static interop:PickElementMode.Window}"
                Header="{I18N {x:Static LocaleKey.ChatWindow_ChatInputBox_AddAttachmentMenuItems_PickWindow}}">
                <MenuItem.Icon>
                  <LucideIcon
                    Width="18" Height="18"
                    Kind="AppWindow" Size="18"/>
                </MenuItem.Icon>
              </MenuItem>
              <MenuItem
                Command="{Binding PickElementCommand}"
                CommandParameter="{x:Static interop:PickElementMode.Element}"
                Header="{I18N {x:Static LocaleKey.ChatWindow_ChatInputBox_AddAttachmentMenuItems_PickElement}}">
                <MenuItem.Icon>
                  <LucideIcon
                    Width="18" Height="18"
                    Kind="SquareMousePointer" Size="18"/>
                </MenuItem.Icon>
              </MenuItem>
              <MenuItem
                Command="{Binding AddClipboardCommand}"
                Header="{I18N {x:Static LocaleKey.ChatWindow_ChatInputBox_AddAttachmentMenuItems_PasteFromClipboard}}">
                <MenuItem.Icon>
                  <LucideIcon
                    Width="18" Height="18"
                    Kind="ClipboardPaste" Size="18"/>
                </MenuItem.Icon>
              </MenuItem>
              <MenuItem
                Command="{Binding AddFileCommand}"
                Header="{I18N {x:Static LocaleKey.ChatWindow_ChatInputBox_AddAttachmentMenuItems_AttachFile}}">
                <MenuItem.Icon>
                  <LucideIcon
                    Width="18" Height="18"
                    Kind="File" Size="18"/>
                </MenuItem.Icon>
              </MenuItem>
            </v:ChatInputBox.AddChatAttachmentMenuItems>

            <v:ChatInputBox.SettingsMenuItems>
              <StackPanel
                Orientation="Vertical" Spacing="4">
                <StackPanel
                  Orientation="Horizontal" Spacing="4">
                  <TextBlock
                    Classes="Muted" VerticalAlignment="Center"
                    FontSize="12"
                    Text="{I18N {x:Static LocaleKey.ChatWindow_ChatInputBox_SettingsMenuItems_VisualTreeTokenLimit}}"/>
                  <TextBlock
                    Classes="Muted" VerticalAlignment="Center"
                    FontSize="12"
                    Text="{Binding Settings.Internal.VisualTreeTokenLimit, Mode=OneWay}"/>
                </StackPanel>

                <Slider
                  MinWidth="200" VerticalAlignment="Center">
                  <Interaction.Behaviors>
                    <be:LogarithmicSliderBehavior
                      Maximum="{Binding Settings.Model.SelectedCustomAssistant.MaxTokens.ActualValue, FallbackValue=8192, Converter={x:Static vc:DoubleConverters.Multiply}, ConverterParameter=0.5}"
                      Minimum="512"
                      Value="{Binding Settings.Internal.VisualTreeTokenLimit, Mode=TwoWay}"/>
                  </Interaction.Behaviors>
                </Slider>
              </StackPanel>
              <StackPanel
                Margin="0,4,0,0" Orientation="Vertical"
                Spacing="4">
                <StackPanel
                  Orientation="Horizontal" Spacing="4">
                  <TextBlock
                    Classes="Muted" VerticalAlignment="Center"
                    FontSize="12"
                    Text="{I18N {x:Static LocaleKey.ChatWindow_ChatInputBox_SettingsMenuItems_VisualTreeDetailLevel}}"/>
                  <TextBlock
                    Classes="Muted" VerticalAlignment="Center"
                    FontSize="12">
                    <TextBlock.Text>
                      <I18N Key="{Binding Settings.ChatWindow.VisualTreeDetailLevel, Converter={x:Static vc:DynamicResourceKeyConverter.Shared}}"/>
                    </TextBlock.Text>
                  </TextBlock>
                </StackPanel>
                <Slider
                  MinWidth="160" IsSnapToTickEnabled="True"
                  Maximum="2" Minimum="0"
                  TickFrequency="1"
                  Value="{Binding Settings.ChatWindow.VisualTreeDetailLevel, Mode=TwoWay, Converter={x:Static vc:Int32Converters.FromEnum}}"/>
              </StackPanel>
            </v:ChatInputBox.SettingsMenuItems>
          </v:ChatInputBox>
        </ExperimentalAcrylicBorder>
      </Grid>

      <Grid
        IsSharedSizeScope="True"
        IsVisible="{Binding IsViewingHistory}"
        RowDefinitions="Auto,Auto,Auto,*">
        <Button
          HorizontalAlignment="Left"
          shadui:ButtonAssist.Icon="{LucideIconContent ArrowLeft}"
          Command="{Binding SwitchViewingHistoryCommand}"
          CommandParameter="False" Content="Back"/>

        <Menu
          Grid.Row="0" HorizontalAlignment="Right">
          <MenuItem
            Classes="Ghost" shadui:MenuItemAssist.PopupPlacement="Bottom"
            ToolTip.Tip="{I18N {x:Static LocaleKey.ChatInputBox_AddAttachmentMenuItem_ToolTip}}">
            <MenuItem.Header>
              <LucideIcon
                HorizontalAlignment="Center" VerticalAlignment="Center"
                Kind="Paperclip" Size="16"/>
            </MenuItem.Header>
          </MenuItem>
        </Menu>

        <Grid
          Margin="23,0,20,0" ColumnSpacing="8"
          Row="1">
          <Grid.ColumnDefinitions>
            <ColumnDefinition
              Width="Auto" SharedSizeGroup="Check"/>
            <ColumnDefinition/>
            <ColumnDefinition
              Width="Auto" SharedSizeGroup="Date"/>
            <ColumnDefinition
              Width="Auto" SharedSizeGroup="Action"/>
          </Grid.ColumnDefinitions>

          <CheckBox
            Grid.Column="0"
            IsChecked="{Binding IsAllHistorySelected}"/>
          <TextBlock
            Grid.Column="1" VerticalAlignment="Center"
            Text="{I18N {x:Static LocaleKey.ChatContext_Metadata_Topic_Header}}"/>
          <TextBlock
            Grid.Column="2" VerticalAlignment="Center"
            Text="{I18N {x:Static LocaleKey.ChatContext_Metadata_DateModified_Header}}"/>
        </Grid>

        <Border
          Grid.Row="2" Height="1"
          Margin="0,6,0,0"
          Background="{DynamicResource BorderColor}"/>

        <ScrollViewer
          Grid.Row="3" HorizontalContentAlignment="Stretch"
          HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
          <Interaction.Behaviors>
            <be:AutoLoadBehavior Command="{Binding $parent[v:ChatWindow].ViewModel.ChatContextManager.LoadMoreHistoryCommand}">
              <be:AutoLoadBehavior.CommandParameter>
                <sys:Int32>20</sys:Int32>
              </be:AutoLoadBehavior.CommandParameter>
            </be:AutoLoadBehavior>
          </Interaction.Behaviors>

          <ItemsControl
            Margin="8" Padding="0"
            ItemsSource="{Binding ChatContextManager.AllHistory}">
            <ItemsControl.ItemsPanel>
              <ItemsPanelTemplate>
                <StackPanel
                  Orientation="Vertical" Spacing="8"/>
              </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>

            <ItemsControl.ItemTemplate>
              <DataTemplate DataType="chat:ChatContextHistory">
                <StackPanel
                  Orientation="Vertical" Spacing="4">
                  <TextBlock
                    Classes="Muted" HorizontalAlignment="Left"
                    FontSize="12">
                    <TextBlock.Text>
                      <I18N Key="{Binding Date, Converter={x:Static vc:DynamicResourceKeyConverter.Shared}}"/>
                    </TextBlock.Text>
                  </TextBlock>

                  <ListBox
                    Padding="0" Background="Transparent"
                    BorderThickness="0" CornerRadius="0"
                    ItemsSource="{Binding MetadataList}"
                    ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                    SelectedItem="{Binding $parent[v:ChatWindow].ViewModel.ChatContextManager.CurrentMetadata, FallbackValue={x:Null}}">
                    <ListBox.Styles>
                      <Style Selector="ListBoxItem">
                        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                      </Style>

                      <Style Selector="LucideIcon">
                        <Setter Property="Size" Value="14"/>
                      </Style>
                    </ListBox.Styles>

                    <ListBox.ItemTemplate>
                      <DataTemplate DataType="chat:ChatContextMetadata">
                        <Grid ColumnSpacing="8">
                          <Grid.ColumnDefinitions>
                            <ColumnDefinition
                              Width="Auto" SharedSizeGroup="Check"/>
                            <ColumnDefinition/>
                            <ColumnDefinition
                              Width="Auto" SharedSizeGroup="Date"/>
                            <ColumnDefinition
                              Width="Auto" SharedSizeGroup="Action"/>
                          </Grid.ColumnDefinitions>

                          <CheckBox
                            Grid.Column="0"
                            IsChecked="{Binding IsSelected, Mode=TwoWay}"/>
                          <TextBlock
                            Grid.Column="1" VerticalAlignment="Center"
                            IsVisible="{Binding IsTemporary}"
                            Opacity="0.6"
                            Text="{I18N {x:Static LocaleKey.ChatContext_Temporary}}"/>
                          <shadui:EditableTextBlock
                            x:Name="TopicEditableTextBlock" Grid.Column="1"
                            VerticalAlignment="Center"
                            IsVisible="{Binding !IsTemporary}"
                            Text="{Binding Topic, Mode=TwoWay}"
                            Watermark="{I18N {x:Static LocaleKey.ChatContext_Metadata_Topic_Default}}"/>
                          <TextBlock
                            Grid.Column="2" VerticalAlignment="Center"
                            Text="{Binding LocalDateModified, StringFormat='{}{0:G}'}"
                            TextTrimming="CharacterEllipsis"/>
                          <Button
                            Grid.Column="3"
                            Content="{LucideIconContent Ellipsis}">
                            <Button.Flyout>
                              <MenuFlyout>
                                <MenuItem
                                  Command="{Binding #TopicEditableTextBlock.EnterEditMode}"
                                  Header="{I18N {x:Static LocaleKey.ChatWindow_ChatHistory_Rename_Header}}"
                                  Icon="{LucideIconContent Pencil}"
                                  IsVisible="{Binding !IsTemporary}"/>
                                <MenuItem
                                  Foreground="{DynamicResource DestructiveColor}"
                                  Header="{I18N {x:Static LocaleKey.ChatWindow_ChatHistory_Delete_Header}}">
                                  <MenuItem.Icon>
                                    <LucideIcon
                                      Foreground="{DynamicResource DestructiveColor}"
                                      Kind="Delete"/>
                                  </MenuItem.Icon>
                                </MenuItem>
                              </MenuFlyout>
                            </Button.Flyout>
                          </Button>
                        </Grid>
                      </DataTemplate>
                    </ListBox.ItemTemplate>
                  </ListBox>
                </StackPanel>
              </DataTemplate>
            </ItemsControl.ItemTemplate>
          </ItemsControl>
        </ScrollViewer>
      </Grid>
    </Panel>
  </Grid>
</v:ReactiveShadWindow>